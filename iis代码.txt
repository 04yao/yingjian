`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company: 
// Engineer: 
// 
// Create Date: 2025/04/22 13:59:55
// Design Name: 
// Module Name: i2s mic
// Project Name: 
// Target Devices: 
// Tool Versions: 
// Description: 
// 
// Dependencies: 
// 
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
// 
//////////////////////////////////////////////////////////////////////////////////


module i2s_mic(
    input wire clk,
    input wire rst_n,
    input wire SD,
    output reg WS,
    output reg SCK,
    output reg [23:0] audio_data,
    output reg data_valid 
    );
    
    //SCK
    parameter CLK_FREQ = 100_000_000; //FPGA sys clk
    parameter SCK_FREQ = 2_304_000;   //Fs * bits * 2 = 48kHz * 24 * 2 = 2.304MHz
    
    reg [15:0] sck_cnt;
    
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            SCK <= 0;
            sck_cnt <= 0;
        end else if (sck_cnt == (CLK_FREQ/(2*SCK_FREQ) - 1)) begin
            SCK <= ~SCK;
            sck_cnt <= 0;
        end else begin
            sck_cnt <= sck_cnt + 1;
        end
    end
    
    //WS
    reg [5:0] ws_cnt;
    always @(posedge SCK or negedge rst_n) begin
        if (!rst_n) begin
            WS <= 0;
            ws_cnt <= 0;
        end else if (ws_cnt == 23) begin
            WS <= ~WS;
            ws_cnt <= 0;
        end else begin
            ws_cnt <= ws_cnt + 1;
        end
    end
    
    //SD SCK下降沿有效
reg [23:0] data_shift;
reg [4:0] bit_cnt;
wire [23:0] next_data_shift;
assign  next_data_shift = {data_shift[22:0], SD};

always @(negedge SCK or negedge rst_n) begin
    if (!rst_n) begin
        bit_cnt <= 0;
        data_shift <= 0;
        audio_data <= 0;
        data_valid <= 0;
    end else begin
        data_shift <= next_data_shift;

        if (bit_cnt == 23) begin
            audio_data <= next_data_shift;  // ✅ 使用 shift 后的值
            data_valid <= 1;
            bit_cnt <= 0;
        end else begin
            data_valid <= 0;
            bit_cnt <= bit_cnt + 1;
        end
    end
end

endmodule
